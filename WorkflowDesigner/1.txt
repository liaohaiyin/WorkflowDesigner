// ==================== 基础枚举和模型 ====================

public enum WorkflowNodeType
{
    Start,          // 开始节点
    End,            // 结束节点
    Approval,       // 审批节点
    Decision,       // 判断节点
    Task,           // 任务节点
    Notification,   // 通知节点
    DataOperation,  // 数据操作节点
    Timer,          // 定时器节点
    SubWorkflow     // 子流程节点
}

public enum NodeExecutionStatus
{
    Pending,        // 待处理
    InProgress,     // 进行中
    Completed,      // 已完成
    Failed,         // 失败
    Timeout,        // 超时
    Skipped,        // 跳过
    Cancelled       // 取消
}

public enum ApprovalStrategy
{
    Sequential,     // 串行审批
    Parallel,       // 并行审批
    Voting,         // 投票审批
    FirstApproval   // 第一人审批即可
}

public enum TimeoutAction
{
    AutoApprove,    // 自动通过
    AutoReject,     // 自动拒绝
    Escalate,       // 升级处理
    Reassign        // 重新分配
}

// ==================== 基础工作流节点类 ====================

public abstract class WorkflowNodeViewModel : CodeGenNodeViewModel
{
    public string NodeId { get; set; } = Guid.NewGuid().ToString();
    public string DisplayName { get; set; }
    public string Description { get; set; }
    public WorkflowNodeType WorkflowNodeType { get; }
    
    #region ExecutionStatus
    public NodeExecutionStatus ExecutionStatus
    {
        get => _executionStatus;
        set
        {
            this.RaiseAndSetIfChanged(ref _executionStatus, value);
            UpdateNodeAppearance();
        }
    }
    private NodeExecutionStatus _executionStatus = NodeExecutionStatus.Pending;
    #endregion

    #region TimeoutDuration
    public TimeSpan? TimeoutDuration
    {
        get => _timeoutDuration;
        set => this.RaiseAndSetIfChanged(ref _timeoutDuration, value);
    }
    private TimeSpan? _timeoutDuration;
    #endregion

    public Dictionary<string, object> Properties { get; set; } = new Dictionary<string, object>();

    protected WorkflowNodeViewModel(WorkflowNodeType nodeType) : base(NodeType.FlowControl)
    {
        WorkflowNodeType = nodeType;
        UpdateNodeAppearance();
    }

    private void UpdateNodeAppearance()
    {
        // 根据执行状态更新节点外观
        Background = GetStatusColor(ExecutionStatus);
    }

    private Brush GetStatusColor(NodeExecutionStatus status)
    {
        return status switch
        {
            NodeExecutionStatus.Pending => new SolidColorBrush(Color.FromRgb(0xE0, 0xE0, 0xE0)),
            NodeExecutionStatus.InProgress => new SolidColorBrush(Color.FromRgb(0x4C, 0xAF, 0x50)),
            NodeExecutionStatus.Completed => new SolidColorBrush(Color.FromRgb(0x2E, 0x7D, 0x32)),
            NodeExecutionStatus.Failed => new SolidColorBrush(Color.FromRgb(0xF4, 0x43, 0x36)),
            NodeExecutionStatus.Timeout => new SolidColorBrush(Color.FromRgb(0xFF, 0x98, 0x00)),
            NodeExecutionStatus.Skipped => new SolidColorBrush(Color.FromRgb(0x9E, 0x9E, 0x9E)),
            NodeExecutionStatus.Cancelled => new SolidColorBrush(Color.FromRgb(0x75, 0x75, 0x75)),
            _ => new SolidColorBrush(Color.FromRgb(0xE0, 0xE0, 0xE0))
        };
    }

    public abstract bool CanExecute(WorkflowContext context);
    public abstract Task<NodeExecutionResult> ExecuteAsync(WorkflowContext context);
}

// ==================== 审批节点实现 ====================

public class ApprovalNodeViewModel : WorkflowNodeViewModel
{
    static ApprovalNodeViewModel()
    {
        Splat.Locator.CurrentMutable.Register(() => new WorkflowNodeView(), typeof(IViewFor<ApprovalNodeViewModel>));
    }

    #region ApprovalStrategy
    public ApprovalStrategy Strategy
    {
        get => _strategy;
        set => this.RaiseAndSetIfChanged(ref _strategy, value);
    }
    private ApprovalStrategy _strategy = ApprovalStrategy.Sequential;
    #endregion

    #region Approvers
    public ObservableCollection<string> Approvers { get; } = new ObservableCollection<string>();
    #endregion

    #region RequiredApprovals
    public int RequiredApprovals
    {
        get => _requiredApprovals;
        set => this.RaiseAndSetIfChanged(ref _requiredApprovals, value);
    }
    private int _requiredApprovals = 1;
    #endregion

    #region TimeoutAction
    public TimeoutAction TimeoutAction
    {
        get => _timeoutAction;
        set => this.RaiseAndSetIfChanged(ref _timeoutAction, value);
    }
    private TimeoutAction _timeoutAction = TimeoutAction.Escalate;
    #endregion

    #region ApprovalComments
    public string ApprovalComments
    {
        get => _approvalComments;
        set => this.RaiseAndSetIfChanged(ref _approvalComments, value);
    }
    private string _approvalComments = "";
    #endregion

    public ValueNodeInputViewModel<IStatement> FlowInput { get; }
    public ValueNodeOutputViewModel<IStatement> ApprovedOutput { get; }
    public ValueNodeOutputViewModel<IStatement> RejectedOutput { get; }

    public ApprovalNodeViewModel() : base(WorkflowNodeType.Approval)
    {
        this.Name = "审批节点";
        DisplayName = "审批节点";

        // 流程输入端口
        FlowInput = new CodeGenInputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输入"
        };
        this.Inputs.Add(FlowInput);

        // 审批通过输出端口
        ApprovedOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "通过",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(ApprovedOutput);

        // 审批拒绝输出端口
        RejectedOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "拒绝",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(RejectedOutput);
    }

    public override bool CanExecute(WorkflowContext context)
    {
        return Approvers.Any() && !string.IsNullOrEmpty(DisplayName);
    }

    public override async Task<NodeExecutionResult> ExecuteAsync(WorkflowContext context)
    {
        ExecutionStatus = NodeExecutionStatus.InProgress;
        
        try
        {
            // 这里实现具体的审批逻辑
            // 1. 根据策略分配审批任务
            // 2. 等待审批结果
            // 3. 处理超时情况
            
            var result = await ProcessApprovalAsync(context);
            
            ExecutionStatus = result.IsSuccess ? NodeExecutionStatus.Completed : NodeExecutionStatus.Failed;
            return result;
        }
        catch (Exception ex)
        {
            ExecutionStatus = NodeExecutionStatus.Failed;
            return NodeExecutionResult.Failure(ex.Message);
        }
    }

    private async Task<NodeExecutionResult> ProcessApprovalAsync(WorkflowContext context)
    {
        // 模拟审批处理逻辑
        await Task.Delay(1000); // 模拟处理时间
        return NodeExecutionResult.Success("审批完成");
    }
}

// ==================== 判断节点实现 ====================

public class DecisionNodeViewModel : WorkflowNodeViewModel
{
    static DecisionNodeViewModel()
    {
        Splat.Locator.CurrentMutable.Register(() => new WorkflowNodeView(), typeof(IViewFor<DecisionNodeViewModel>));
    }

    #region Conditions
    public ObservableCollection<ConditionRule> Conditions { get; } = new ObservableCollection<ConditionRule>();
    #endregion

    #region LogicalOperator
    public LogicalOperator Operator
    {
        get => _operator;
        set => this.RaiseAndSetIfChanged(ref _operator, value);
    }
    private LogicalOperator _operator = LogicalOperator.And;
    #endregion

    public ValueNodeInputViewModel<IStatement> FlowInput { get; }
    public ValueNodeOutputViewModel<IStatement> TrueOutput { get; }
    public ValueNodeOutputViewModel<IStatement> FalseOutput { get; }

    public DecisionNodeViewModel() : base(WorkflowNodeType.Decision)
    {
        this.Name = "判断节点";
        DisplayName = "判断节点";

        FlowInput = new CodeGenInputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输入"
        };
        this.Inputs.Add(FlowInput);

        TrueOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "是",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(TrueOutput);

        FalseOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "否",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(FalseOutput);
    }

    public override bool CanExecute(WorkflowContext context)
    {
        return Conditions.Any();
    }

    public override async Task<NodeExecutionResult> ExecuteAsync(WorkflowContext context)
    {
        ExecutionStatus = NodeExecutionStatus.InProgress;
        
        try
        {
            bool result = EvaluateConditions(context);
            ExecutionStatus = NodeExecutionStatus.Completed;
            
            return NodeExecutionResult.Success($"条件判断结果: {result}");
        }
        catch (Exception ex)
        {
            ExecutionStatus = NodeExecutionStatus.Failed;
            return NodeExecutionResult.Failure(ex.Message);
        }
    }

    private bool EvaluateConditions(WorkflowContext context)
    {
        if (!Conditions.Any()) return true;

        return Operator == LogicalOperator.And
            ? Conditions.All(c => c.Evaluate(context))
            : Conditions.Any(c => c.Evaluate(context));
    }
}

// ==================== 任务节点实现 ====================

public class TaskNodeViewModel : WorkflowNodeViewModel
{
    static TaskNodeViewModel()
    {
        Splat.Locator.CurrentMutable.Register(() => new WorkflowNodeView(), typeof(IViewFor<TaskNodeViewModel>));
    }

    #region TaskType
    public TaskType TaskType
    {
        get => _taskType;
        set => this.RaiseAndSetIfChanged(ref _taskType, value);
    }
    private TaskType _taskType = TaskType.Manual;
    #endregion

    #region Assignees
    public ObservableCollection<string> Assignees { get; } = new ObservableCollection<string>();
    #endregion

    #region Instructions
    public string Instructions
    {
        get => _instructions;
        set => this.RaiseAndSetIfChanged(ref _instructions, value);
    }
    private string _instructions = "";
    #endregion

    #region FormFields
    public ObservableCollection<FormField> FormFields { get; } = new ObservableCollection<FormField>();
    #endregion

    public ValueNodeInputViewModel<IStatement> FlowInput { get; }
    public ValueNodeOutputViewModel<IStatement> FlowOutput { get; }

    public TaskNodeViewModel() : base(WorkflowNodeType.Task)
    {
        this.Name = "任务节点";
        DisplayName = "任务节点";

        FlowInput = new CodeGenInputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输入"
        };
        this.Inputs.Add(FlowInput);

        FlowOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输出",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(FlowOutput);
    }

    public override bool CanExecute(WorkflowContext context)
    {
        return Assignees.Any() && !string.IsNullOrEmpty(Instructions);
    }

    public override async Task<NodeExecutionResult> ExecuteAsync(WorkflowContext context)
    {
        ExecutionStatus = NodeExecutionStatus.InProgress;
        
        try
        {
            if (TaskType == TaskType.Automatic)
            {
                // 自动任务处理
                await ProcessAutomaticTaskAsync(context);
            }
            else
            {
                // 人工任务处理 - 等待用户完成
                await ProcessManualTaskAsync(context);
            }
            
            ExecutionStatus = NodeExecutionStatus.Completed;
            return NodeExecutionResult.Success("任务完成");
        }
        catch (Exception ex)
        {
            ExecutionStatus = NodeExecutionStatus.Failed;
            return NodeExecutionResult.Failure(ex.Message);
        }
    }

    private async Task ProcessAutomaticTaskAsync(WorkflowContext context)
    {
        // 自动任务处理逻辑
        await Task.Delay(500);
    }

    private async Task ProcessManualTaskAsync(WorkflowContext context)
    {
        // 人工任务处理逻辑 - 创建待办事项
        await Task.Delay(100);
    }
}

// ==================== 通知节点实现 ====================

public class NotificationNodeViewModel : WorkflowNodeViewModel
{
    static NotificationNodeViewModel()
    {
        Splat.Locator.CurrentMutable.Register(() => new WorkflowNodeView(), typeof(IViewFor<NotificationNodeViewModel>));
    }

    #region NotificationType
    public NotificationType NotificationType
    {
        get => _notificationType;
        set => this.RaiseAndSetIfChanged(ref _notificationType, value);
    }
    private NotificationType _notificationType = NotificationType.Email;
    #endregion

    #region Recipients
    public ObservableCollection<string> Recipients { get; } = new ObservableCollection<string>();
    #endregion

    #region MessageTemplate
    public string MessageTemplate
    {
        get => _messageTemplate;
        set => this.RaiseAndSetIfChanged(ref _messageTemplate, value);
    }
    private string _messageTemplate = "";
    #endregion

    #region Subject
    public string Subject
    {
        get => _subject;
        set => this.RaiseAndSetIfChanged(ref _subject, value);
    }
    private string _subject = "";
    #endregion

    public ValueNodeInputViewModel<IStatement> FlowInput { get; }
    public ValueNodeOutputViewModel<IStatement> FlowOutput { get; }

    public NotificationNodeViewModel() : base(WorkflowNodeType.Notification)
    {
        this.Name = "通知节点";
        DisplayName = "通知节点";

        FlowInput = new CodeGenInputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输入"
        };
        this.Inputs.Add(FlowInput);

        FlowOutput = new CodeGenOutputViewModel<IStatement>(PortType.Execution)
        {
            Name = "输出",
            Value = Observable.Return(new StubStatement())
        };
        this.Outputs.Add(FlowOutput);
    }

    public override bool CanExecute(WorkflowContext context)
    {
        return Recipients.Any() && !string.IsNullOrEmpty(MessageTemplate);
    }

    public override async Task<NodeExecutionResult> ExecuteAsync(WorkflowContext context)
    {
        ExecutionStatus = NodeExecutionStatus.InProgress;
        
        try
        {
            await SendNotificationAsync(context);
            ExecutionStatus = NodeExecutionStatus.Completed;
            return NodeExecutionResult.Success("通知发送成功");
        }
    }


    <!-- ==================== 主窗口视图 ==================== -->
<!-- Views/WorkflowDesignerWindow.xaml -->
<Window x:Class="WorkflowDesigner.Views.WorkflowDesignerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:NodeNetwork.Views;assembly=NodeNetwork"
        xmlns:nodeList="clr-namespace:NodeNetwork.Toolkit.NodeList;assembly=NodeNetworkToolkit"
        xmlns:breadcrumbBar="clr-namespace:NodeNetwork.Toolkit.BreadcrumbBar;assembly=NodeNetworkToolkit"
        xmlns:local="clr-namespace:WorkflowDesigner.Views"
        mc:Ignorable="d"
        Title="工作流可视化设计器" Height="800" Width="1400"
        WindowState="Maximized">
    
    <Window.Resources>
        <Style x:Key="ToolbarButtonStyle" TargetType="Button">
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="#CCCCCC"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E3F2FD"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="StatusBarTextStyle" TargetType="TextBlock">
            <Setter Property="Margin" Value="10,0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>  <!-- 工具栏 -->
            <RowDefinition Height="Auto"/>  <!-- 面包屑导航 -->
            <RowDefinition Height="*"/>     <!-- 主工作区 -->
            <RowDefinition Height="Auto"/>  <!-- 状态栏 -->
        </Grid.RowDefinitions>

        <!-- 工具栏 -->
        <ToolBar Grid.Row="0" Background="#F5F5F5" Height="40">
            <Button x:Name="NewButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="新建工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="📄" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="新建"/>
                </StackPanel>
            </Button>
            <Button x:Name="SaveButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="保存工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="💾" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="保存"/>
                </StackPanel>
            </Button>
            <Button x:Name="LoadButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="加载工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="📂" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="打开"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button x:Name="RunButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="运行工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="▶️" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="运行"/>
                </StackPanel>
            </Button>
            <Button x:Name="StopButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="停止工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="⏹️" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="停止"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button x:Name="ValidateButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="验证工作流">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="✅" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="验证"/>
                </StackPanel>
            </Button>
            <Button x:Name="AutoLayoutButton" Style="{StaticResource ToolbarButtonStyle}" ToolTip="自动布局">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="🔧" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="自动布局"/>
                </StackPanel>
            </Button>
        </ToolBar>

        <!-- 面包屑导航 -->
        <breadcrumbBar:BreadcrumbBarView x:Name="BreadcrumbBar" Grid.Row="1" MinHeight="30" Background="#EEEEEE"/>

        <!-- 主工作区 -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250"/>   <!-- 节点面板 -->
                <ColumnDefinition Width="5"/>     <!-- 分隔器 -->
                <ColumnDefinition Width="*"/>     <!-- 画布区域 -->
                <ColumnDefinition Width="5"/>     <!-- 分隔器 -->
                <ColumnDefinition Width="300"/>   <!-- 属性面板 -->
            </Grid.ColumnDefinitions>

            <!-- 节点面板 -->
            <Grid Grid.Column="0" Background="#FAFAFA">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <Border Grid.Row="0" Background="#E3F2FD" Padding="10">
                    <TextBlock Text="节点工具箱" FontWeight="Bold" FontSize="14"/>
                </Border>
                
                <nodeList:NodeListView x:Name="NodeListView" Grid.Row="1" Margin="5"/>
            </Grid>

            <GridSplitter Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="#DDDDDD"/>

            <!-- 画布区域 -->
            <views:NetworkView x:Name="NetworkView" Grid.Column="2">
                <views:NetworkView.NetworkBackground>
                    <DrawingBrush TileMode="Tile" Viewport="0,0,20,20" ViewportUnits="Absolute" 
                                  Viewbox="0,0,20,20" ViewboxUnits="Absolute" Opacity="0.3">
                        <DrawingBrush.Drawing>
                            <GeometryDrawing Brush="LightGray">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,1,1"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </views:NetworkView.NetworkBackground>
            </views:NetworkView>

            <GridSplitter Grid.Column="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="#DDDDDD"/>

            <!-- 属性面板 -->
            <Grid Grid.Column="4" Background="#FAFAFA">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="200"/>
                </Grid.RowDefinitions>

                <!-- 属性面板标题 -->
                <Border Grid.Row="0" Background="#E3F2FD" Padding="10">
                    <TextBlock Text="属性配置" FontWeight="Bold" FontSize="14"/>
                </Border>

                <!-- 属性编辑区域 -->
                <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                    <ContentPresenter x:Name="PropertyContentPresenter" Margin="10"/>
                </ScrollViewer>

                <!-- 工作流监控标题 -->
                <Border Grid.Row="2" Background="#FFF3E0" Padding="10">
                    <TextBlock Text="工作流监控" FontWeight="Bold" FontSize="14"/>
                </Border>

                <!-- 工作流状态监控 -->
                <local:WorkflowMonitorView x:Name="WorkflowMonitorView" Grid.Row="3"/>
            </Grid>
        </Grid>

        <!-- 状态栏 -->
        <StatusBar Grid.Row="3" Background="#F0F0F0" Height="25">
            <TextBlock x:Name="StatusText" Style="{StaticResource StatusBarTextStyle}" Text="就绪"/>
            <Separator/>
            <TextBlock x:Name="NodeCountText" Style="{StaticResource StatusBarTextStyle}"/>
            <Separator/>
            <TextBlock x:Name="ConnectionCountText" Style="{StaticResource StatusBarTextStyle}"/>
        </StatusBar>
    </Grid>
</Window>

<!-- ==================== 工作流节点视图 ==================== -->
<!-- Views/WorkflowNodeView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.WorkflowNodeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:views="clr-namespace:NodeNetwork.Views;assembly=NodeNetwork">
    
    <UserControl.Resources>
        <Style x:Key="NodeStatusIndicator" TargetType="Ellipse">
            <Setter Property="Width" Value="10"/>
            <Setter Property="Height" Value="10"/>
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
    </UserControl.Resources>

    <views:NodeView x:Name="NodeView">
        <views:NodeView.HeaderStyle>
            <Style TargetType="ContentPresenter">
                <Setter Property="Content">
                    <Setter.Value>
                        <StackPanel Orientation="Horizontal">
                            <Ellipse x:Name="StatusIndicator" Style="{StaticResource NodeStatusIndicator}"/>
                            <TextBlock Text="{Binding Name}" FontWeight="Bold" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
            </Style>
        </views:NodeView.HeaderStyle>
    </views:NodeView>
</UserControl>

<!-- ==================== 审批节点属性面板 ==================== -->
<!-- Views/Properties/ApprovalNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.ApprovalNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 审批人配置 -->
        <GroupBox Header="审批人配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="审批策略:"/>
                <ComboBox x:Name="StrategyComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="串行审批" Tag="Sequential"/>
                    <ComboBoxItem Content="并行审批" Tag="Parallel"/>
                    <ComboBoxItem Content="投票审批" Tag="Voting"/>
                    <ComboBoxItem Content="第一人审批" Tag="FirstApproval"/>
                </ComboBox>

                <Label Content="审批人列表:"/>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="100"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBox x:Name="ApproverTextBox" Width="150" Margin="0,0,5,0"/>
                        <Button x:Name="AddApproverButton" Content="添加" Width="50"/>
                    </StackPanel>
                    
                    <ListBox x:Name="ApproversListBox" Grid.Row="1" BorderThickness="1" BorderBrush="Gray"/>
                    
                    <Button x:Name="RemoveApproverButton" Grid.Row="2" Content="删除选中" 
                            HorizontalAlignment="Left" Margin="0,5,0,0"/>
                </Grid>

                <Label Content="所需审批数量:" Margin="0,10,0,0"/>
                <TextBox x:Name="RequiredApprovalsTextBox"/>
            </StackPanel>
        </GroupBox>

        <!-- 超时设置 -->
        <GroupBox Header="超时设置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="超时时间(小时):"/>
                <TextBox x:Name="TimeoutDurationTextBox" Margin="0,0,0,10"/>

                <Label Content="超时动作:"/>
                <ComboBox x:Name="TimeoutActionComboBox">
                    <ComboBoxItem Content="自动通过" Tag="AutoApprove"/>
                    <ComboBoxItem Content="自动拒绝" Tag="AutoReject"/>
                    <ComboBoxItem Content="升级处理" Tag="Escalate"/>
                    <ComboBoxItem Content="重新分配" Tag="Reassign"/>
                </ComboBox>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 判断节点属性面板 ==================== -->
<!-- Views/Properties/DecisionNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.DecisionNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 条件配置 -->
        <GroupBox Header="判断条件" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="逻辑运算符:"/>
                <ComboBox x:Name="LogicalOperatorComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="并且(AND)" Tag="And"/>
                    <ComboBoxItem Content="或者(OR)" Tag="Or"/>
                </ComboBox>

                <Label Content="条件列表:"/>
                <DataGrid x:Name="ConditionsDataGrid" Height="200" AutoGenerateColumns="False"
                          CanUserAddRows="True" CanUserDeleteRows="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="字段名" Binding="{Binding FieldName}" Width="100"/>
                        <DataGridComboBoxColumn Header="操作符" SelectedValueBinding="{Binding Operator}" Width="80">
                            <DataGridComboBoxColumn.ElementStyle>
                                <Style TargetType="ComboBox">
                                    <Setter Property="ItemsSource">
                                        <Setter.Value>
                                            <x:Array Type="sys:String" xmlns:sys="clr-namespace:System;assembly=mscorlib">
                                                <sys:String>等于</sys:String>
                                                <sys:String>不等于</sys:String>
                                                <sys:String>大于</sys:String>
                                                <sys:String>大于等于</sys:String>
                                                <sys:String>小于</sys:String>
                                                <sys:String>小于等于</sys:String>
                                                <sys:String>包含</sys:String>
                                            </x:Array>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </DataGridComboBoxColumn.ElementStyle>
                        </DataGridComboBoxColumn>
                        <DataGridTextColumn Header="值" Binding="{Binding Value}" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 任务节点属性面板 ==================== -->
<!-- Views/Properties/TaskNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.TaskNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 任务配置 -->
        <GroupBox Header="任务配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="任务类型:"/>
                <ComboBox x:Name="TaskTypeComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="人工任务" Tag="Manual"/>
                    <ComboBoxItem Content="自动任务" Tag="Automatic"/>
                </ComboBox>

                <Label Content="执行人:"/>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="80"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBox x:Name="AssigneeTextBox" Width="150" Margin="0,0,5,0"/>
                        <Button x:Name="AddAssigneeButton" Content="添加" Width="50"/>
                    </StackPanel>
                    
                    <ListBox x:Name="AssigneesListBox" Grid.Row="1" BorderThickness="1" BorderBrush="Gray"/>
                    
                    <Button x:Name="RemoveAssigneeButton" Grid.Row="2" Content="删除选中" 
                            HorizontalAlignment="Left" Margin="0,5,0,0"/>
                </Grid>

                <Label Content="任务说明:" Margin="0,10,0,0"/>
                <TextBox x:Name="InstructionsTextBox" AcceptsReturn="True" Height="80" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 表单配置 -->
        <GroupBox Header="表单配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                    <Button x:Name="AddFormFieldButton" Content="添加字段" Width="80" Margin="0,0,5,0"/>
                    <Button x:Name="EditFormFieldButton" Content="编辑字段" Width="80" Margin="0,0,5,0"/>
                    <Button x:Name="RemoveFormFieldButton" Content="删除字段" Width="80"/>
                </StackPanel>
                
                <DataGrid x:Name="FormFieldsDataGrid" Height="150" AutoGenerateColumns="False"
                          CanUserAddRows="False" CanUserDeleteRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="字段名" Binding="{Binding Name}" Width="80"/>
                        <DataGridTextColumn Header="标签" Binding="{Binding Label}" Width="80"/>
                        <DataGridTextColumn Header="类型" Binding="{Binding FieldType}" Width="60"/>
                        <DataGridCheckBoxColumn Header="必填" Binding="{Binding IsRequired}" Width="40"/>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 通知节点属性面板 ==================== -->
<!-- Views/Properties/NotificationNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.NotificationNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 通知配置 -->
        <GroupBox Header="通知配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="通知类型:"/>
                <ComboBox x:Name="NotificationTypeComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="邮件" Tag="Email"/>
                    <ComboBoxItem Content="短信" Tag="SMS"/>
                    <ComboBoxItem Content="系统消息" Tag="SystemMessage"/>
                    <ComboBoxItem Content="微信" Tag="WeChat"/>
                    <ComboBoxItem Content="钉钉" Tag="DingTalk"/>
                </ComboBox>

                <Label Content="接收人:"/>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="80"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    
                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5">
                        <TextBox x:Name="RecipientTextBox" Width="150" Margin="0,0,5,0"/>
                        <Button x:Name="AddRecipientButton" Content="添加" Width="50"/>
                    </StackPanel>
                    
                    <ListBox x:Name="RecipientsListBox" Grid.Row="1" BorderThickness="1" BorderBrush="Gray"/>
                    
                    <Button x:Name="RemoveRecipientButton" Grid.Row="2" Content="删除选中" 
                            HorizontalAlignment="Left" Margin="0,5,0,0"/>
                </Grid>

                <Label Content="主题:" Margin="0,10,0,0"/>
                <TextBox x:Name="SubjectTextBox" Margin="0,0,0,10"/>

                <Label Content="消息模板:"/>
                <TextBox x:Name="MessageTemplateTextBox" AcceptsReturn="True" Height="100" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 工作流监控视图 ==================== -->
<!-- Views/WorkflowMonitorView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.WorkflowMonitorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- 控制按钮 -->
        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="10">
            <Button x:Name="RefreshButton" Content="刷新" Width="60" Margin="0,0,5,0"/>
            <Button x:Name="ClearLogButton" Content="清空日志" Width="80"/>
        </StackPanel>

        <!-- 监控信息 -->
        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="执行状态">
                <StackPanel Margin="10">
                    <TextBlock Text="工作流状态:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <TextBlock x:Name="WorkflowStatusText" Margin="0,0,0,10"/>
                    
                    <TextBlock Text="当前节点:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <TextBlock x:Name="CurrentNodeText" Margin="0,0,0,10"/>
                    
                    <TextBlock Text="执行进度:" FontWeight="Bold" Margin="0,0,0,5"/>
                    <ProgressBar x:Name="ExecutionProgressBar" Height="20" Margin="0,0,0,5"/>
                    <TextBlock x:Name="ProgressText" HorizontalAlignment="Center"/>
                </StackPanel>
            </TabItem>
            
            <TabItem Header="执行日志">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <TextBox x:Name="ExecutionLogTextBox" IsReadOnly="True" Background="Black" 
                             Foreground="Green" FontFamily="Consolas" FontSize="10"/>
                </ScrollViewer>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>

<!-- ==================== 表单字段编辑对话框 ==================== -->
<!-- Views/Dialogs/FormFieldEditorDialog.xaml -->
<Window x:Class="WorkflowDesigner.Views.Dialogs.FormFieldEditorDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="表单字段编辑" Height="400" Width="500" ResizeMode="NoResize"
        WindowStartupLocation="CenterOwner">
    
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 字段配置 -->
        <StackPanel Grid.Row="0">
            <Label Content="字段名称:"/>
            <TextBox x:Name="FieldNameTextBox" Margin="0,0,0,10"/>

            <Label Content="显示标签:"/>
            <TextBox x:Name="FieldLabelTextBox" Margin="0,0,0,10"/>

            <Label Content="字段类型:"/>
            <ComboBox x:Name="FieldTypeComboBox" Margin="0,0,0,10">
                <ComboBoxItem Content="文本" Tag="Text"/>
                <ComboBoxItem Content="数字" Tag="Number"/>
                <ComboBoxItem Content="日期" Tag="Date"/>
                <ComboBoxItem Content="布尔" Tag="Boolean"/>
                <ComboBoxItem Content="下拉选择" Tag="Select"/>
                <ComboBoxItem Content="多选" Tag="MultiSelect"/>
                <ComboBoxItem Content="文本域" Tag="TextArea"/>
                <ComboBoxItem Content="文件" Tag="File"/>
            </ComboBox>

            <CheckBox x:Name="IsRequiredCheckBox" Content="必填字段" Margin="0,0,0,10"/>

            <Label Content="默认值:"/>
            <TextBox x:Name="DefaultValueTextBox" Margin="0,0,0,10"/>

            <Label Content="选项列表:" x:Name="OptionsLabel" Visibility="Collapsed"/>
            <TextBox x:Name="OptionsTextBox" AcceptsReturn="True" Height="80" 
                     TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                     Visibility="Collapsed" ToolTip="每行一个选项"/>
        </StackPanel>

        <!-- 按钮 -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,20,0,0">
            <Button x:Name="OkButton" Content="确定" Width="80" Height="30" Margin="0,0,10,0" IsDefault="True"/>
            <Button x:Name="CancelButton" Content="取消" Width="80" Height="30" IsCancel="True"/>
        </StackPanel>
    </Grid>
</Window>

// ==================== 主窗口代码后台 ====================
// Views/WorkflowDesignerWindow.xaml.cs

using System;
using System.Linq;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Windows;
using System.Windows.Controls;
using WorkflowDesigner.ViewModels;
using ReactiveUI;
using NodeNetwork.Views;

namespace WorkflowDesigner.Views
{
    public partial class WorkflowDesignerWindow : Window, IViewFor<WorkflowDesignerViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(WorkflowDesignerViewModel), typeof(WorkflowDesignerWindow), 
            new PropertyMetadata(null));

        public WorkflowDesignerViewModel ViewModel
        {
            get => (WorkflowDesignerViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (WorkflowDesignerViewModel)value;
        }
        #endregion

        public WorkflowDesignerWindow()
        {
            InitializeComponent();
            ViewModel = new WorkflowDesignerViewModel();

            this.WhenActivated(disposables =>
            {
                // 绑定网络视图
                this.OneWayBind(ViewModel, vm => vm.Network, v => v.NetworkView.ViewModel)
                    .DisposeWith(disposables);

                // 绑定节点列表
                this.OneWayBind(ViewModel, vm => vm.NodeList, v => v.NodeListView.ViewModel)
                    .DisposeWith(disposables);

                // 绑定面包屑导航
                this.OneWayBind(ViewModel, vm => vm.NetworkBreadcrumbBar, v => v.BreadcrumbBar.ViewModel)
                    .DisposeWith(disposables);

                // 绑定工具栏命令
                this.BindCommand(ViewModel, vm => vm.NewWorkflow, v => v.NewButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.SaveWorkflow, v => v.SaveButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.LoadWorkflow, v => v.LoadButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.RunWorkflow, v => v.RunButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.StopWorkflow, v => v.StopButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.ValidateWorkflow, v => v.ValidateButton)
                    .DisposeWith(disposables);
                this.BindCommand(ViewModel, vm => vm.AutoLayout, v => v.AutoLayoutButton)
                    .DisposeWith(disposables);

                // 监听选中节点变化，更新属性面板
                this.WhenAnyValue(v => v.ViewModel.SelectedNode)
                    .Subscribe(selectedNode =>
                    {
                        UpdatePropertyPanel(selectedNode);
                    })
                    .DisposeWith(disposables);

                // 更新状态栏
                this.WhenAnyValue(v => v.ViewModel.Network)
                    .Where(network => network != null)
                    {
                        network.Nodes.CollectionChanged += (s, e) => UpdateStatusBar();
                        network.Connections.CollectionChanged += (s, e) => UpdateStatusBar();
                        UpdateStatusBar();
                    })
                    .DisposeWith(disposables);
            });
        }

        private void UpdatePropertyPanel(WorkflowNodeViewModel selectedNode)
        {
            if (selectedNode == null)
            {
                PropertyContentPresenter.Content = null;
                return;
            }

            UserControl propertyView = selectedNode.WorkflowNodeType switch
            {
                WorkflowNodeType.Approval => new ApprovalNodePropertyView { DataContext = selectedNode },
                WorkflowNodeType.Decision => new DecisionNodePropertyView { DataContext = selectedNode },
                WorkflowNodeType.Task => new TaskNodePropertyView { DataContext = selectedNode },
                WorkflowNodeType.Notification => new NotificationNodePropertyView { DataContext = selectedNode },
                WorkflowNodeType.DataOperation => new DataOperationNodePropertyView { DataContext = selectedNode },
                _ => new DefaultNodePropertyView { DataContext = selectedNode }
            };

            PropertyContentPresenter.Content = propertyView;
        }

        private void UpdateStatusBar()
        {
            if (ViewModel?.Network == null) return;

            StatusText.Text = "就绪";
            NodeCountText.Text = $"节点: {ViewModel.Network.Nodes.Count}";
            ConnectionCountText.Text = $"连接: {ViewModel.Network.Connections.Count}";
        }
    }
}

// ==================== 工作流节点视图代码后台 ====================
// Views/WorkflowNodeView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Media;
using ReactiveUI;

namespace WorkflowDesigner.Views
{
    public partial class WorkflowNodeView : UserControl, IViewFor<WorkflowNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(WorkflowNodeViewModel), typeof(WorkflowNodeView), 
            new PropertyMetadata(null));

        public WorkflowNodeViewModel ViewModel
        {
            get => (WorkflowNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (WorkflowNodeViewModel)value;
        }
        #endregion

        public WorkflowNodeView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                NodeView.ViewModel = this.ViewModel;
                Disposable.Create(() => NodeView.ViewModel = null).DisposeWith(disposables);

                // 绑定执行状态指示器
                this.OneWayBind(ViewModel, vm => vm.ExecutionStatus, v => v.StatusIndicator.Fill, 
                    ConvertStatusToBrush).DisposeWith(disposables);
            });
        }

        private Brush ConvertStatusToBrush(NodeExecutionStatus status)
        {
            return status switch
            {
                NodeExecutionStatus.Pending => Brushes.Gray,
                NodeExecutionStatus.InProgress => Brushes.Yellow,
                NodeExecutionStatus.Completed => Brushes.Green,
                NodeExecutionStatus.Failed => Brushes.Red,
                NodeExecutionStatus.Timeout => Brushes.Orange,
                NodeExecutionStatus.Skipped => Brushes.LightGray,
                NodeExecutionStatus.Cancelled => Brushes.DarkGray,
                _ => Brushes.Gray
            };
        }
    }
}

// ==================== 审批节点属性视图代码后台 ====================
// Views/Properties/ApprovalNodePropertyView.xaml.cs

using System;
using System.Linq;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views.Properties
{
    public partial class ApprovalNodePropertyView : UserControl, IViewFor<ApprovalNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(ApprovalNodeViewModel), typeof(ApprovalNodePropertyView), 
            new PropertyMetadata(null));

        public ApprovalNodeViewModel ViewModel
        {
            get => (ApprovalNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (ApprovalNodeViewModel)value;
        }
        #endregion

        public ApprovalNodePropertyView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定基本信息
                this.Bind(ViewModel, vm => vm.DisplayName, v => v.DisplayNameTextBox.Text)
                    .DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Description, v => v.DescriptionTextBox.Text)
                    .DisposeWith(disposables);

                // 绑定审批策略
                this.OneWayBind(ViewModel, vm => vm.Strategy, v => v.StrategyComboBox.SelectedIndex,
                    strategy => (int)strategy).DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Strategy, v => v.StrategyComboBox.SelectedIndex,
                    index => (ApprovalStrategy)index, strategy => (int)strategy).DisposeWith(disposables);

                // 绑定审批人列表
                this.OneWayBind(ViewModel, vm => vm.Approvers, v => v.ApproversListBox.ItemsSource)
                    .DisposeWith(disposables);

                // 添加审批人按钮事件
                AddApproverButton.Click += (s, e) =>
                {
                    if (!string.IsNullOrWhiteSpace(ApproverTextBox.Text))
                    {
                        ViewModel.Approvers.Add(ApproverTextBox.Text.Trim());
                        ApproverTextBox.Clear();
                    }
                };

                // 删除审批人按钮事件
                RemoveApproverButton.Click += (s, e) =>
                {
                    if (ApproversListBox.SelectedItem is string selectedApprover)
                    {
                        ViewModel.Approvers.Remove(selectedApprover);
                    }
                };

                // 绑定所需审批数量
                this.Bind(ViewModel, vm => vm.RequiredApprovals, v => v.RequiredApprovalsTextBox.Text,
                    count => count.ToString(), text => int.TryParse(text, out var result) ? result : 1)
                    .DisposeWith(disposables);

                // 绑定超时设置
                this.Bind(ViewModel, vm => vm.TimeoutDuration, v => v.TimeoutDurationTextBox.Text,
                    timespan => timespan?.TotalHours.ToString() ?? "",
                    text => double.TryParse(text, out var hours) ? TimeSpan.FromHours(hours) : (TimeSpan?)null)
                    .DisposeWith(disposables);

                this.OneWayBind(ViewModel, vm => vm.TimeoutAction, v => v.TimeoutActionComboBox.SelectedIndex,
                    action => (int)action).DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.TimeoutAction, v => v.TimeoutActionComboBox.SelectedIndex,
                    index => (TimeoutAction)index, action => (int)action).DisposeWith(disposables);
            });
        }
    }
}

// ==================== 判断节点属性视图代码后台 ====================
// Views/Properties/DecisionNodePropertyView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views.Properties
{
    public partial class DecisionNodePropertyView : UserControl, IViewFor<DecisionNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(DecisionNodeViewModel), typeof(DecisionNodePropertyView), 
            new PropertyMetadata(null));

        public DecisionNodeViewModel ViewModel
        {
            get => (DecisionNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (DecisionNodeViewModel)value;
        }
        #endregion

        public DecisionNodePropertyView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定基本信息
                this.Bind(ViewModel, vm => vm.DisplayName, v => v.DisplayNameTextBox.Text)
                    .DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Description, v => v.DescriptionTextBox.Text)
                    .DisposeWith(disposables);

                // 绑定逻辑运算符
                this.OneWayBind(ViewModel, vm => vm.Operator, v => v.LogicalOperatorComboBox.SelectedIndex,
                    op => (int)op).DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Operator, v => v.LogicalOperatorComboBox.SelectedIndex,
                    index => (LogicalOperator)index, op => (int)op).DisposeWith(disposables);

                // 绑定条件列表
                this.OneWayBind(ViewModel, vm => vm.Conditions, v => v.ConditionsDataGrid.ItemsSource)
                    .DisposeWith(disposables);
            });
        }
    }
}

// ==================== 任务节点属性视图代码后台 ====================
// Views/Properties/TaskNodePropertyView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views.Properties
{
    public partial class TaskNodePropertyView : UserControl, IViewFor<TaskNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(TaskNodeViewModel), typeof(TaskNodePropertyView), 
            new PropertyMetadata(null));

        public TaskNodeViewModel ViewModel
        {
            get => (TaskNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (TaskNodeViewModel)value;
        }
        #endregion

        public TaskNodePropertyView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定基本信息
                this.Bind(ViewModel, vm => vm.DisplayName, v => v.DisplayNameTextBox.Text)
                    .DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Description, v => v.DescriptionTextBox.Text)
                    .DisposeWith(disposables);

                // 绑定任务类型
                this.OneWayBind(ViewModel, vm => vm.TaskType, v => v.TaskTypeComboBox.SelectedIndex,
                    type => (int)type).DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.TaskType, v => v.TaskTypeComboBox.SelectedIndex,
                    index => (TaskType)index, type => (int)type).DisposeWith(disposables);

                // 绑定执行人列表
                this.OneWayBind(ViewModel, vm => vm.Assignees, v => v.AssigneesListBox.ItemsSource)
                    .DisposeWith(disposables);

                // 添加执行人按钮事件
                AddAssigneeButton.Click += (s, e) =>
                {
                    if (!string.IsNullOrWhiteSpace(AssigneeTextBox.Text))
                    {
                        ViewModel.Assignees.Add(AssigneeTextBox.Text.Trim());
                        AssigneeTextBox.Clear();
                    }
                };

                // 删除执行人按钮事件
                RemoveAssigneeButton.Click += (s, e) =>
                {
                    if (AssigneesListBox.SelectedItem is string selectedAssignee)
                    {
                        ViewModel.Assignees.Remove(selectedAssignee);
                    }
                };

                // 绑定任务说明
                this.Bind(ViewModel, vm => vm.Instructions, v => v.InstructionsTextBox.Text)
                    .DisposeWith(disposables);

                // 绑定表单字段列表
                this.OneWayBind(ViewModel, vm => vm.FormFields, v => v.FormFieldsDataGrid.ItemsSource)
                    .DisposeWith(disposables);

                // 表单字段操作事件
                AddFormFieldButton.Click += (s, e) =>
                {
                    var dialog = new FormFieldEditorDialog();
                    if (dialog.ShowDialog() == true)
                    {
                        ViewModel.FormFields.Add(dialog.FormField);
                    }
                };

                EditFormFieldButton.Click += (s, e) =>
                {
                    if (FormFieldsDataGrid.SelectedItem is FormField selectedField)
                    {
                        var dialog = new FormFieldEditorDialog(selectedField);
                        if (dialog.ShowDialog() == true)
                        {
                            // 字段已在对话框中直接编辑
                        }
                    }
                };

                RemoveFormFieldButton.Click += (s, e) =>
                {
                    if (FormFieldsDataGrid.SelectedItem is FormField selectedField)
                    {
                        ViewModel.FormFields.Remove(selectedField);
                    }
                };
            });
        }
    }
}

// ==================== 通知节点属性视图代码后台 ====================
// Views/Properties/NotificationNodePropertyView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views.Properties
{
    public partial class NotificationNodePropertyView : UserControl, IViewFor<NotificationNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(NotificationNodeViewModel), typeof(NotificationNodePropertyView), 
            new PropertyMetadata(null));

        public NotificationNodeViewModel ViewModel
        {
            get => (NotificationNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (NotificationNodeViewModel)value;
        }
        #endregion

        public NotificationNodePropertyView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定基本信息
                this.Bind(ViewModel, vm => vm.DisplayName, v => v.DisplayNameTextBox.Text)
                    .DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.Description, v => v.DescriptionTextBox.Text)
                    .DisposeWith(disposables);

                // 绑定通知类型
                this.OneWayBind(ViewModel, vm => vm.NotificationType, v => v.NotificationTypeComboBox.SelectedIndex,
                    type => (int)type).DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.NotificationType, v => v.NotificationTypeComboBox.SelectedIndex,
                    index => (NotificationType)index, type => (int)type).DisposeWith(disposables);

                // 绑定接收人列表
                this.OneWayBind(ViewModel, vm => vm.Recipients, v => v.RecipientsListBox.ItemsSource)
                    .DisposeWith(disposables);

                // 添加接收人按钮事件
                AddRecipientButton.Click += (s, e) =>
                {
                    if (!string.IsNullOrWhiteSpace(RecipientTextBox.Text))
                    {
                        ViewModel.Recipients.Add(RecipientTextBox.Text.Trim());
                        RecipientTextBox.Clear();
                    }
                };

                // 删除接收人按钮事件
                RemoveRecipientButton.Click += (s, e) =>
                {
                    if (RecipientsListBox.SelectedItem is string selectedRecipient)
                    {
                        ViewModel.Recipients.Remove(selectedRecipient);
                    }
                };

                // 绑定主题和消息模板
                this.Bind(ViewModel, vm => vm.Subject, v => v.SubjectTextBox.Text)
                    .DisposeWith(disposables);
                this.Bind(ViewModel, vm => vm.MessageTemplate, v => v.MessageTemplateTextBox.Text)
                    .DisposeWith(disposables);
            });
        }
    }
}

// ==================== 工作流监控视图代码后台 ====================
// Views/WorkflowMonitorView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views
{
    public partial class WorkflowMonitorView : UserControl, IViewFor<WorkflowEngineViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(WorkflowEngineViewModel), typeof(WorkflowMonitorView), 
            new PropertyMetadata(null));

        public WorkflowEngineViewModel ViewModel
        {
            get => (WorkflowEngineViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (WorkflowEngineViewModel)value;
        }
        #endregion

        public WorkflowMonitorView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定工作流状态
                this.OneWayBind(ViewModel, vm => vm.CurrentInstance.Status, v => v.WorkflowStatusText.Text,
                    status => status.ToString()).DisposeWith(disposables);

                // 绑定当前节点
                this.OneWayBind(ViewModel, vm => vm.CurrentInstance, v => v.CurrentNodeText.Text,
                    instance => GetCurrentNodeName(instance)).DisposeWith(disposables);

                // 按钮事件
                RefreshButton.Click += (s, e) => RefreshStatus();
                ClearLogButton.Click += (s, e) => ExecutionLogTextBox.Clear();
            });
        }

        private string GetCurrentNodeName(WorkflowInstance instance)
        {
            if (instance?.NodeExecutions == null) return "无";
            
            var currentNode = instance.NodeExecutions
                .Where(ne => ne.Status == NodeExecutionStatus.InProgress)
                .FirstOrDefault();
            
            return currentNode?.NodeId ?? "无";
        }

        private void RefreshStatus()
        {
            // 刷新工作流状态逻辑
            if (ViewModel?.CurrentInstance != null)
            {
                var progress = CalculateProgress(ViewModel.CurrentInstance);
                ExecutionProgressBar.Value = progress;
                ProgressText.Text = $"{progress:P0}";
            }
        }

        private double CalculateProgress(WorkflowInstance instance)
        {
            if (instance?.NodeExecutions == null || !instance.NodeExecutions.Any())
                return 0.0;

            var completedCount = instance.NodeExecutions.Count(ne => 
                ne.Status == NodeExecutionStatus.Completed || 
                ne.Status == NodeExecutionStatus.Skipped);
            
            return (double)completedCount / instance.NodeExecutions.Count;
        }
    }
}

// ==================== 表单字段编辑对话框代码后台 ====================
// Views/Dialogs/FormFieldEditorDialog.xaml.cs

using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace WorkflowDesigner.Views.Dialogs
{
    public partial class FormFieldEditorDialog : Window
    {
        public FormField FormField { get; private set; }

        public FormFieldEditorDialog() : this(new FormField())
        {
        }

        public FormFieldEditorDialog(FormField formField)
        {
            InitializeComponent();
            FormField = formField ?? new FormField();
            LoadFormField();
            
            // 字段类型改变时显示/隐藏选项列表
            FieldTypeComboBox.SelectionChanged += (s, e) =>
            {
                var selectedType = GetSelectedFieldType();
                var showOptions = selectedType == FormFieldType.Select || selectedType == FormFieldType.MultiSelect;
                
                OptionsLabel.Visibility = showOptions ? Visibility.Visible : Visibility.Collapsed;
                OptionsTextBox.Visibility = showOptions ? Visibility.Visible : Visibility.Collapsed;
            };

            OkButton.Click += (s, e) =>
            {
                if (ValidateAndSaveFormField())
                {
                    DialogResult = true;
                    Close();
                }
            };

            CancelButton.Click += (s, e) =>
            {
                DialogResult = false;
                Close();
            };
        }

        private void LoadFormField()
        {
            FieldNameTextBox.Text = FormField.Name;
            FieldLabelTextBox.Text = FormField.Label;
            FieldTypeComboBox.SelectedIndex = (int)FormField.FieldType;
            IsRequiredCheckBox.IsChecked = FormField.IsRequired;
            DefaultValueTextBox.Text = FormField.DefaultValue?.ToString() ?? "";
            OptionsTextBox.Text = string.Join("\n", FormField.Options);
        }

        private bool ValidateAndSaveFormField()
        {
            if (string.IsNullOrWhiteSpace(FieldNameTextBox.Text))
            {
                MessageBox.Show("字段名称不能为空", "验证错误", MessageBoxButton.OK, MessageBoxImage.Warning);
                return false;
            }

            if (string.IsNullOrWhiteSpace(FieldLabelTextBox.Text))
            {
                MessageBox.Show("显示标签不能为空", "验证错误", MessageBoxButton.OK, MessageBoxImage.Warning);
                return false;
            }

            // 保存表单字段
            FormField.Name = FieldNameTextBox.Text.Trim();
            FormField.Label = FieldLabelTextBox.Text.Trim();
            FormField.FieldType = GetSelectedFieldType();
            FormField.IsRequired = IsRequiredCheckBox.IsChecked ?? false;
            FormField.DefaultValue = DefaultValueTextBox.Text;

            // 保存选项列表
            FormField.Options.Clear();
            if (!string.IsNullOrWhiteSpace(OptionsTextBox.Text))
            {
                var options = OptionsTextBox.Text.Split('\n')
                    .Select(o => o.Trim())
                    .Where(o => !string.IsNullOrEmpty(o));
                
                foreach (var option in options)
                {
                    FormField.Options.Add(option);
                }
            }

            return true;
        }

        private FormFieldType GetSelectedFieldType()
        {
            return FieldTypeComboBox.SelectedIndex >= 0 
                ? (FormFieldType)FieldTypeComboBox.SelectedIndex 
                : FormFieldType.Text;
        }
    }
}

// ==================== 默认节点属性视图 ====================
// Views/Properties/DefaultNodePropertyView.xaml.cs

using System;
using System.Reactive.Disposables;
using System.Windows;
using System.Windows.Controls;
using ReactiveUI;

namespace WorkflowDesigner.Views.Properties
{
    public partial class DefaultNodePropertyView : UserControl, IViewFor<WorkflowNodeViewModel>
    {
        #region ViewModel
        public static readonly DependencyProperty ViewModelProperty = DependencyProperty.Register(
            nameof(ViewModel), typeof(WorkflowNodeViewModel), typeof(DefaultNodePropertyView), 
            new PropertyMetadata(null));

        public WorkflowNodeViewModel ViewModel
        {
            get => (WorkflowNodeViewModel)GetValue(ViewModelProperty);
            set => SetValue(ViewModelProperty, value);
        }

        object IViewFor.ViewModel
        {
            get => ViewModel;
            set => ViewModel = (WorkflowNodeViewModel)value;
        }
        #endregion

        public DefaultNodePropertyView()
        {
            InitializeComponent();

            this.WhenActivated(disposables =>
            {
                // 绑定基本属性
                if (ViewModel != null)
                {
                    this.Bind(ViewModel, vm => vm.DisplayName, v => v.DisplayNameTextBox.Text)
                        .DisposeWith(disposables);
                    this.Bind(ViewModel, vm => vm.Description, v => v.DescriptionTextBox.Text)
                        .DisposeWith(disposables);
                }
            });
        }
    }
}

<!-- ==================== 默认节点属性视图 ==================== -->
<!-- Views/Properties/DefaultNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.DefaultNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>

                <Label Content="节点类型:" Margin="0,10,0,0"/>
                <TextBox x:Name="NodeTypeTextBox" IsReadOnly="True" Background="#F0F0F0"/>
            </StackPanel>
        </GroupBox>

        <!-- 执行状态 -->
        <GroupBox Header="执行状态" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="当前状态:"/>
                <TextBox x:Name="ExecutionStatusTextBox" IsReadOnly="True" Background="#F0F0F0" Margin="0,0,0,10"/>
                
                <Label Content="节点ID:"/>
                <TextBox x:Name="NodeIdTextBox" IsReadOnly="True" Background="#F0F0F0"/>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 数据操作节点属性视图 ==================== -->
<!-- Views/Properties/DataOperationNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.DataOperationNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 数据操作配置 -->
        <GroupBox Header="数据操作配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="操作类型:"/>
                <ComboBox x:Name="OperationComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="创建(Create)" Tag="Create"/>
                    <ComboBoxItem Content="读取(Read)" Tag="Read"/>
                    <ComboBoxItem Content="更新(Update)" Tag="Update"/>
                    <ComboBoxItem Content="删除(Delete)" Tag="Delete"/>
                </ComboBox>

                <Label Content="数据源:"/>
                <ComboBox x:Name="DataSourceComboBox" IsEditable="True" Margin="0,0,0,10">
                    <ComboBoxItem Content="数据库表"/>
                    <ComboBoxItem Content="Web API"/>
                    <ComboBoxItem Content="文件系统"/>
                    <ComboBoxItem Content="消息队列"/>
                </ComboBox>

                <Label Content="连接字符串/URL:"/>
                <TextBox x:Name="ConnectionStringTextBox" Margin="0,0,0,10"/>

                <Label Content="SQL查询/脚本:"/>
                <TextBox x:Name="SqlQueryTextBox" AcceptsReturn="True" Height="100" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" 
                         FontFamily="Consolas" FontSize="10"/>
            </StackPanel>
        </GroupBox>

        <!-- 参数配置 -->
        <GroupBox Header="参数配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                    <Button x:Name="AddParameterButton" Content="添加参数" Width="80" Margin="0,0,5,0"/>
                    <Button x:Name="EditParameterButton" Content="编辑参数" Width="80" Margin="0,0,5,0"/>
                    <Button x:Name="RemoveParameterButton" Content="删除参数" Width="80"/>
                </StackPanel>
                
                <DataGrid x:Name="ParametersDataGrid" Height="120" AutoGenerateColumns="False"
                          CanUserAddRows="False" CanUserDeleteRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="参数名" Binding="{Binding Name}" Width="100"/>
                        <DataGridTextColumn Header="类型" Binding="{Binding ParameterType.Name}" Width="80"/>
                        <DataGridTextColumn Header="值" Binding="{Binding Value}" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </GroupBox>

        <!-- 输出映射 -->
        <GroupBox Header="输出映射" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="结果变量名:"/>
                <TextBox x:Name="ResultVariableTextBox" Margin="0,0,0,10"/>
                
                <CheckBox x:Name="LogExecutionCheckBox" Content="记录执行日志" IsChecked="True"/>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 开始节点属性视图 ==================== -->
<!-- Views/Properties/StartNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.StartNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 启动配置 -->
        <GroupBox Header="启动配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="触发方式:"/>
                <ComboBox x:Name="TriggerTypeComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="手动启动" Tag="Manual"/>
                    <ComboBoxItem Content="定时启动" Tag="Timer"/>
                    <ComboBoxItem Content="事件触发" Tag="Event"/>
                    <ComboBoxItem Content="API调用" Tag="Api"/>
                </ComboBox>

                <Label Content="启动条件:"/>
                <TextBox x:Name="StartConditionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>

                <Label Content="初始变量:" Margin="0,10,0,0"/>
                <DataGrid x:Name="InitialVariablesDataGrid" Height="100" AutoGenerateColumns="False"
                          CanUserAddRows="True" CanUserDeleteRows="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="变量名" Binding="{Binding Name}" Width="100"/>
                        <DataGridTextColumn Header="类型" Binding="{Binding Type}" Width="80"/>
                        <DataGridTextColumn Header="默认值" Binding="{Binding DefaultValue}" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 结束节点属性视图 ==================== -->
<!-- Views/Properties/EndNodePropertyView.xaml -->
<UserControl x:Class="WorkflowDesigner.Views.Properties.EndNodePropertyView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <StackPanel Margin="10">
        <!-- 基本信息 -->
        <GroupBox Header="基本信息" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="节点名称:"/>
                <TextBox x:Name="DisplayNameTextBox" Margin="0,0,0,10"/>
                
                <Label Content="描述:"/>
                <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>
            </StackPanel>
        </GroupBox>

        <!-- 结束配置 -->
        <GroupBox Header="结束配置" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="结束类型:"/>
                <ComboBox x:Name="EndTypeComboBox" Margin="0,0,0,10">
                    <ComboBoxItem Content="正常结束" Tag="Normal"/>
                    <ComboBoxItem Content="异常结束" Tag="Error"/>
                    <ComboBoxItem Content="取消结束" Tag="Cancelled"/>
                </ComboBox>

                <Label Content="结束消息:"/>
                <TextBox x:Name="EndMessageTextBox" AcceptsReturn="True" Height="60" 
                         TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>

                <CheckBox x:Name="SendNotificationCheckBox" Content="发送结束通知" Margin="0,10,0,0"/>
                
                <Label Content="通知接收人:" Margin="0,10,0,0"/>
                <TextBox x:Name="NotificationRecipientsTextBox" Height="40" 
                         AcceptsReturn="True" TextWrapping="Wrap" 
                         ToolTip="多个接收人用分号分隔"/>
            </StackPanel>
        </GroupBox>

        <!-- 输出结果 -->
        <GroupBox Header="输出结果" Margin="0,0,0,10">
            <StackPanel Margin="10">
                <Label Content="输出变量:"/>
                <DataGrid x:Name="OutputVariablesDataGrid" Height="100" AutoGenerateColumns="False"
                          CanUserAddRows="True" CanUserDeleteRows="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="变量名" Binding="{Binding Name}" Width="100"/>
                        <DataGridTextColumn Header="类型" Binding="{Binding Type}" Width="80"/>
                        <DataGridTextColumn Header="值表达式" Binding="{Binding Expression}" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>

<!-- ==================== 工作流验证结果对话框 ==================== -->
<!-- Views/Dialogs/ValidationResultDialog.xaml -->
<Window x:Class="WorkflowDesigner.Views.Dialogs.ValidationResultDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="工作流验证结果" Height="500" Width="600" ResizeMode="CanResize"
        WindowStartupLocation="CenterOwner">
    
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 验证结果摘要 -->
        <StackPanel Grid.Row="0" Margin="0,0,0,10">
            <TextBlock x:Name="ValidationSummaryText" FontSize="14" FontWeight="Bold"/>
        </StackPanel>

        <!-- 详细信息 -->
        <TabControl Grid.Row="1">
            <TabItem Header="错误" x:Name="ErrorsTab">
                <ListBox x:Name="ErrorsListBox" BorderThickness="1" BorderBrush="Red">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="❌" FontSize="16" Margin="0,0,10,0"/>
                                <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </TabItem>
            
            <TabItem Header="警告" x:Name="WarningsTab">
                <ListBox x:Name="WarningsListBox" BorderThickness="1" BorderBrush="Orange">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="⚠️" FontSize="16" Margin="0,0,10,0"/>
                                <TextBlock Text="{Binding}" TextWrapping="Wrap"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </TabItem>
            
            <TabItem Header="建议">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <TextBlock x:Name="SuggestionsText" Margin="10" TextWrapping="Wrap">
                        <Run Text="建议:"/>
                        <LineBreak/>
                        <Run Text="• 确保每个工作流都有明确的开始和结束节点"/>
                        <LineBreak/>
                        <Run Text="• 为审批节点配置合适的审批人和超时设置"/>
                        <LineBreak/>
                        <Run Text="• 判断节点应该有明确的条件表达式"/>
                        <LineBreak/>
                        <Run Text="• 通知节点应该配置接收人和消息模板"/>
                        <LineBreak/>
                        <Run Text="• 使用有意义的节点名称以提高可读性"/>
                        <LineBreak/>
                        <Run Text="• 避免创建无法到达的节点"/>
                        <LineBreak/>
                        <Run Text="• 确保所有必需的连接都已建立"/>
                    </TextBlock>
                </ScrollViewer>
            </TabItem>
        </TabControl>

        <!-- 按钮 -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
            <Button x:Name="ExportButton" Content="导出报告" Width="80" Height="30" Margin="0,0,10,0"/>
            <Button x:Name="CloseButton" Content="关闭" Width="80" Height="30" IsDefault="True"/>
        </StackPanel>
    </Grid>
</Window>

<!-- ==================== 工作流设置对话框 ==================== -->
<!-- Views/Dialogs/WorkflowSettingsDialog.xaml -->
<Window x:Class="WorkflowDesigner.Views.Dialogs.WorkflowSettingsDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="工作流设置" Height="600" Width="500" ResizeMode="CanResize"
        WindowStartupLocation="CenterOwner">
    
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 设置选项卡 -->
        <TabControl Grid.Row="0">
            <TabItem Header="基本信息">
                <StackPanel Margin="10">
                    <Label Content="工作流名称:"/>
                    <TextBox x:Name="WorkflowNameTextBox" Margin="0,0,0,10"/>

                    <Label Content="版本号:"/>
                    <TextBox x:Name="VersionTextBox" Margin="0,0,0,10"/>

                    <Label Content="类别:"/>
                    <ComboBox x:Name="CategoryComboBox" Margin="0,0,0,10">
                        <ComboBoxItem Content="审批类" Tag="Approval"/>
                        <ComboBoxItem Content="采购类" Tag="Purchase"/>
                        <ComboBoxItem Content="人事类" Tag="HR"/>
                        <ComboBoxItem Content="财务类" Tag="Finance"/>
                        <ComboBoxItem Content="IT类" Tag="IT"/>
                        <ComboBoxItem Content="通用类" Tag="General"/>
                    </ComboBox>

                    <Label Content="描述:"/>
                    <TextBox x:Name="DescriptionTextBox" AcceptsReturn="True" Height="100" 
                             TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"/>

                    <Label Content="创建者:" Margin="0,10,0,0"/>
                    <TextBox x:Name="CreatedByTextBox"/>

                    <CheckBox x:Name="IsActiveCheckBox" Content="激活状态" Margin="0,10,0,0" IsChecked="True"/>
                </StackPanel>
            </TabItem>

            <TabItem Header="执行设置">
                <StackPanel Margin="10">
                    <Label Content="默认超时时间(小时):"/>
                    <TextBox x:Name="DefaultTimeoutTextBox" Margin="0,0,0,10"/>

                    <Label Content="最大并发实例数:"/>
                    <TextBox x:Name="MaxConcurrentInstancesTextBox" Margin="0,0,0,10"/>

                    <Label Content="优先级:"/>
                    <ComboBox x:Name="PriorityComboBox" Margin="0,0,0,10">
                        <ComboBoxItem Content="低" Tag="Low"/>
                        <ComboBoxItem Content="普通" Tag="Normal"/>
                        <ComboBoxItem Content="高" Tag="High"/>
                        <ComboBoxItem Content="紧急" Tag="Urgent"/>
                    </ComboBox>

                    <CheckBox x:Name="EnableLoggingCheckBox" Content="启用详细日志" IsChecked="True" Margin="0,0,0,10"/>
                    <CheckBox x:Name="EnableRetryCheckBox" Content="启用自动重试" Margin="0,0,0,10"/>

                    <Label Content="重试次数:" Margin="0,10,0,0"/>
                    <TextBox x:Name="RetryCountTextBox" Text="3"/>

                    <Label Content="重试间隔(分钟):" Margin="0,10,0,0"/>
                    <TextBox x:Name="RetryIntervalTextBox" Text="5"/>
                </StackPanel>
            </TabItem>

            <TabItem Header="通知设置">
                <StackPanel Margin="10">
                    <Label Content="默认通知方式:"/>
                    <CheckBox x:Name="EmailNotificationCheckBox" Content="邮件通知" IsChecked="True" Margin="0,5"/>
                    <CheckBox x:Name="SmsNotificationCheckBox" Content="短信通知" Margin="0,5"/>
                    <CheckBox x:Name="SystemNotificationCheckBox" Content="系统通知" IsChecked="True" Margin="0,5"/>

                    <Label Content="管理员邮箱:" Margin="0,10,0,0"/>
                    <TextBox x:Name="AdminEmailTextBox" Margin="0,0,0,10"/>

                    <Label Content="邮件模板:"/>
                    <ComboBox x:Name="EmailTemplateComboBox" Margin="0,0,0,10">
                        <ComboBoxItem Content="默认模板"/>
                        <ComboBoxItem Content="简洁模板"/>
                        <ComboBoxItem Content="详细模板"/>
                    </ComboBox>

                    <CheckBox x:Name="NotifyOnStartCheckBox" Content="启动时通知" Margin="0,5"/>
                    <CheckBox x:Name="NotifyOnCompleteCheckBox" Content="完成时通知" IsChecked="True" Margin="0,5"/>
                    <CheckBox x:Name="NotifyOnErrorCheckBox" Content="错误时通知" IsChecked="True" Margin="0,5"/>
                </StackPanel>
            </TabItem>

            <TabItem Header="安全设置">
                <StackPanel Margin="10">
                    <Label Content="访问权限:"/>
                    <ComboBox x:Name="AccessLevelComboBox" Margin="0,0,0,10">
                        <ComboBoxItem Content="公开" Tag="Public"/>
                        <ComboBoxItem Content="内部" Tag="Internal"/>
                        <ComboBoxItem Content="私有" Tag="Private"/>
                    </ComboBox>

                    <Label Content="允许的用户组:"/>
                    <TextBox x:Name="AllowedGroupsTextBox" AcceptsReturn="True" Height="60" 
                             TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                             ToolTip="多个用户组用分号分隔" Margin="0,0,0,10"/>

                    <CheckBox x:Name="RequireApprovalToStartCheckBox" Content="启动需要审批" Margin="0,5"/>
                    <CheckBox x:Name="EncryptDataCheckBox" Content="加密敏感数据" Margin="0,5"/>
                    <CheckBox x:Name="AuditTrailCheckBox" Content="启用审计跟踪" IsChecked="True" Margin="0,5"/>

                    <Label Content="数据保留期(天):" Margin="0,10,0,0"/>
                    <TextBox x:Name="DataRetentionDaysTextBox" Text="365"/>
                </StackPanel>
            </TabItem>
        </TabControl>

        <!-- 按钮 -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,20,0,0">
            <Button x:Name="OkButton" Content="确定" Width="80" Height="30" Margin="0,0,10,0" IsDefault="True"/>
            <Button x:Name="CancelButton" Content="取消" Width="80" Height="30" IsCancel="True"/>
            <Button x:Name="ApplyButton" Content="应用" Width="80" Height="30" Margin="10,0,0,0"/>
        </StackPanel>
    </Grid>
</Window>

<!-- ==================== 工作流运行状态窗口 ==================== -->
<!-- Views/Dialogs/WorkflowExecutionWindow.xaml -->
<Window x:Class="WorkflowDesigner.Views.Dialogs.WorkflowExecutionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:views="clr-namespace:NodeNetwork.Views;assembly=NodeNetwork"
        Title="工作流执行监控" Height="700" Width="1000" ResizeMode="CanResize"
        WindowStartupLocation="CenterOwner">
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 工具栏 -->
        <ToolBar Grid.Row="0" Background="#F5F5F5">
            <Button x:Name="PauseButton" ToolTip="暂停">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="⏸️" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="暂停"/>
                </StackPanel>
            </Button>
            <Button x:Name="ResumeButton" ToolTip="继续">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="▶️" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="继续"/>
                </StackPanel>
            </Button>
            <Button x:Name="StopExecutionButton" ToolTip="停止">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="⏹️" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="停止"/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button x:Name="RefreshStatusButton" ToolTip="刷新状态">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="🔄" FontSize="16" Margin="0,0,5,0"/>
                    <TextBlock Text="刷新"/>
                </StackPanel>
            </Button>
        </ToolBar>

        <!-- 主要内容区域 -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="300"/>
            </Grid.ColumnDefinitions>

            <!-- 工作流画布 -->
            <views:NetworkView x:Name="ExecutionNetworkView" Grid.Column="0" IsReadOnly="True">
                <views:NetworkView.NetworkBackground>
                    <DrawingBrush TileMode="Tile" Viewport="0,0,20,20" ViewportUnits="Absolute" 
                                  Viewbox="0,0,20,20" ViewboxUnits="Absolute" Opacity="0.1">
                        <DrawingBrush.Drawing>
                            <GeometryDrawing Brush="Blue">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,1,1"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </views:NetworkView.NetworkBackground>
            </views:NetworkView>

            <GridSplitter Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="#DDDDDD"/>

            <!-- 执行信息面板 -->
            <Grid Grid.Column="2" Background="#FAFAFA">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- 执行状态摘要 -->
                <Border Grid.Row="0" Background="#E3F2FD" Padding="10">
                    <StackPanel>
                        <TextBlock Text="执行状态" FontWeight="Bold" FontSize="14" Margin="0,0,0,10"/>
                        
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" Text="状态:" Margin="0,0,10,5"/>
                            <TextBlock Grid.Row="0" Grid.Column="1" x:Name="StatusText" FontWeight="Bold" Margin="0,0,0,5"/>

                            <TextBlock Grid.Row="1" Grid.Column="0" Text="进度:" Margin="0,0,10,5"/>
                            <ProgressBar Grid.Row="1" Grid.Column="1" x:Name="ProgressBar" Height="20" Margin="0,0,0,5"/>

                            <TextBlock Grid.Row="2" Grid.Column="0" Text="当前节点:" Margin="0,0,10,5"/>
                            <TextBlock Grid.Row="2" Grid.Column="1" x:Name="CurrentNodeText" Margin="0,0,0,5"/>

                            <TextBlock Grid.Row="3" Grid.Column="0" Text="运行时间:" Margin="0,0,10,0"/>
                            <TextBlock Grid.Row="3" Grid.Column="1" x:Name="ElapsedTimeText"/>
                        </Grid>
                    </StackPanel>
                </Border>

                <!-- 详细信息选项卡 -->
                <TabControl Grid.Row="1" Margin="5">
                    <TabItem Header="节点状态">
                        <DataGrid x:Name="NodeStatusDataGrid" AutoGenerateColumns="False" IsReadOnly="True">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="节点" Binding="{Binding NodeName}" Width="100"/>
                                <DataGridTextColumn Header="状态" Binding="{Binding Status}" Width="80"/>
                                <DataGridTextColumn Header="开始时间" Binding="{Binding StartTime}" Width="120"/>
                                <DataGridTextColumn Header="结束时间" Binding="{Binding EndTime}" Width="120"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </TabItem>

                    <TabItem Header="变量">
                        <DataGrid x:Name="VariablesDataGrid" AutoGenerateColumns="False" IsReadOnly="True">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="变量名" Binding="{Binding Name}" Width="100"/>
                                <DataGridTextColumn Header="值" Binding="{Binding Value}" Width="*"/>
                                <DataGridTextColumn Header="类型" Binding="{Binding Type}" Width="80"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </TabItem>

                    <TabItem Header="日志">
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <TextBox x:Name="LogTextBox" IsReadOnly="True" Background="Black" 
                                     Foreground="Lime" FontFamily="Consolas" FontSize="10"
                                     TextWrapping="Wrap"/>
                        </ScrollViewer>
                    </TabItem>
                </TabControl>
            </Grid>
        </Grid>

        <!-- 状态栏 -->
        <StatusBar Grid.Row="2" Background="#F0F0F0">
            <TextBlock x:Name="ExecutionStatusText" Text="执行中..."/>
            <Separator/>
            <TextBlock x:Name="ExecutionTimeText"/>
        </StatusBar>
    </Grid>
</Window>

<!-- ==================== 项目文件 ==================== -->
<!-- WorkflowDesigner.csproj -->
<Project Sdk="Microsoft.NET.Sdk.WindowsDesktop">
  <PropertyGroup>
    <TargetFramework>net6.0-windows</TargetFramework>
    <OutputType>WinExe</OutputType>
    <UseWPF>true</UseWPF>
    <StartupObject>WorkflowDesigner.App</StartupObject>
    <AssemblyTitle>工作流可视化设计器</AssemblyTitle>
    <AssemblyDescription>基于WPF和NodeNetwork的企业级工作流设计器</AssemblyDescription>
    <AssemblyCompany>WorkflowDesigner Corp</AssemblyCompany>
    <AssemblyProduct>Workflow Visual Designer</AssemblyProduct>
    <Copyright>Copyright © 2025</Copyright>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <FileVersion>1.0.0.0</FileVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ReactiveUI.WPF" Version="19.5.31" />
    <PackageReference Include="ReactiveUI.Fody" Version="19.5.31" />
    <PackageReference Include="NodeNetwork" Version="2.1.0" />
    <PackageReference Include="NodeNetworkToolkit" Version="2.1.0" />
    <PackageReference Include="Extended.Wpf.Toolkit" Version="4.5.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="7.0.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="7.0.1" />
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="7.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="7.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="7.0.0" />
    <PackageReference Include="Serilog.Extensions.Hosting" Version="7.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="5.0.0" />
    <PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="Resources\**\*" />
  </ItemGroup>

  